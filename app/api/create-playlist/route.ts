// app/api/createPlaylist/route.ts

import { GoogleGenerativeAI } from "@google/generative-ai";
import { NextRequest, NextResponse } from "next/server";
import SpotifyWebApi from "spotify-web-api-node";
import dotenv from "dotenv";

dotenv.config();
const geminiApiKey = process.env.GEMINI_API_KEY;

if (!geminiApiKey) {
  throw new Error(
    "GEMINI_API_KEY is not defined in your environment variables."
  );
}

const googleAI = new GoogleGenerativeAI(geminiApiKey);

const geminiConfig = {
  temperature: 0.9,
  topP: 1,
  topK: 1,
  maxOutputTokens: 4096,
};

const geminiModel = googleAI.getGenerativeModel({
  model: "gemini-pro",
  ...geminiConfig,
});

const spotifyApi = new SpotifyWebApi({
  clientId: process.env.SPOTIFY_CLIENT_ID || "",
  clientSecret: process.env.SPOTIFY_CLIENT_SECRET || "",
  redirectUri: process.env.SPOTIFY_REDIRECT_URI || "",
});

export async function POST(req: NextRequest) {
  try {
    const body = await req.json();

    if (
      !body.userAccessToken ||
      typeof body.userAccessToken !== "string" ||
      !body.mood ||
      typeof body.mood !== "string"
    ) {
      return NextResponse.json(
        { error: "userAccessToken and mood are required and must be strings." },
        { status: 400 }
      );
    }

    // Set the access token for Spotify API
    spotifyApi.setAccessToken(body.userAccessToken);

    // Generate playlist name based on mood
    const playlistName = await generatePlaylistData(body.mood);
    // const playlistName = "test 01";

    if (!playlistName || playlistName.trim() === "") {
      return NextResponse.json(
        { error: "Error generating playlist name!" },
        { status: 500 }
      );
    }

    // Get user ID
    const userIdResponse = await spotifyApi.getMe();
    const userId = userIdResponse.body.id;

    if (!userId || userId.trim() === "") {
      return NextResponse.json(
        { error: "Error getting user ID!" },
        { status: 500 }
      );
    }

    // Create the playlist
    const createPlaylistResponse = await createPlaylist(userId, playlistName);

    return NextResponse.json({
      message: "Playlist created successfully",
      data: createPlaylistResponse,
    });
  } catch (error: any) {
    console.error("Error creating playlist:", error);
    return NextResponse.json(
      { error: "Internal server error", details: error.message || error },
      { status: 500 }
    );
  }
}

const generatePlaylistData = async (mood: string) => {
  try {
    const prompt = `Generate a playlist name for someone who is feeling ${mood}.
    output : A simple playlist name with maxime 3 words or one, allways relavance to mood, should be meaningfull
    `;
    const result = await geminiModel.generateContent(prompt);

    if (result?.response?.candidates?.[0]?.content?.parts?.[0]?.text) {
      const playlistName = result.response.candidates[0].content.parts[0].text;
      console.log(playlistName);
      return playlistName as string;
    }
  } catch (error) {
    console.error("Error generating playlist data:", error);
    throw new Error("Failed to generate playlist data.");
  }
};

const createPlaylist = async (
  userId: string,
  playlistName: string
): Promise<SpotifyApi.CreatePlaylistResponse> => {
  try {
    const response = await spotifyApi.createPlaylist(playlistName, {
      description: "Generated by Promptify AI",
      public: false,
    });

    return response.body; // Return the created playlist object
  } catch (error: any) {
    console.error("Spotify API Error:", error.message || error);
    console.error("Error Details:", error.body || error);
    throw new Error("Failed to create Spotify playlist.");
  }
};
